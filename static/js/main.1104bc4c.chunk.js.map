{"version":3,"sources":["contexts/UserContext.tsx","api/common.ts","api/users.ts","components/user/UserSelect.tsx","api/comments.ts","components/comments/SingleComment.tsx","components/comments/Comments.tsx","components/shared/StyledForm.ts","components/comments/AddComment.tsx","components/comments/CommentsContainer.tsx","components/posts/SinglePost.tsx","components/posts/UserPosts.tsx","api/posts.ts","components/shared/Spinner.tsx","components/posts/UserPostsContainer.tsx","components/user/UserInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Actions","BASE_URL","accessToken","commonParams","_format","getUsers","a","axios","params","updateUserNames","userId","data","method","headers","Authorization","initState","users","activeUser","isLoading","UserContext","createContext","state","dispatch","userReducer","action","type","addUsersStarted","addUsersFailed","error","payload","addUsersSuccess","selectActiveUser","updateActiveUser","map","user","id","UserProvider","children","useReducer","useEffect","res","result","fetchUsers","Provider","value","Wrapper","styled","div","UserSelect","useContext","first_name","last_name","onChange","option","handleChange","getOptionLabel","getOptionValue","options","getComments","postId","post_id","addComment","SingleComment","comment","name","body","Comments","comments","key","StyledForm","form","AddComment","onSubmit","useState","email","formData","setFormData","setIsLoading","resetFormData","e","target","preventDefault","required","placeholder","CommentsContainer","setComments","_meta","code","Error","message","alert","fetchComments","SinglePost","post","showComments","setShowComments","title","onClick","UsersPosts","posts","isOneVisible","setIsOneVisible","length","visiblePosts","getPosts","user_id","Spinner","UserPostsContainer","setPosts","fetchPosts","UserInput","formState","setFormState","resetState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"kKAUYA,E,6GCVCC,EAAW,kCACXC,EAAc,uCAEdC,EAAe,CAC1BC,QAAS,OACT,eAAgBF,GCAX,SAAeG,IAAtB,+B,4CAAO,sBAAAC,EAAA,+EACEC,IAAMN,EAAW,SAAU,CAChCO,OAAO,eACFL,MAHF,4C,sBAQA,SAAeM,EAAtB,oC,4CAAO,WAA+BC,EAAgBC,GAA/C,SAAAL,EAAA,+EACEC,IAAMN,EAAW,UAAYS,EAAQ,CAC1CE,OAAQ,QACRC,QAAS,CACPC,cAAe,UAAYZ,GAE7BS,UANG,4C,gCFHKX,O,qCAAAA,I,qCAAAA,I,mCAAAA,I,uCAAAA,I,wCAAAA,M,KAiDZ,IAAMe,EAAmB,CACvBC,MAAO,GACPC,WAAY,KACZC,WAAW,GAGAC,EAAcC,wBAGxB,CACDC,MAAON,EACPO,SAAU,kBAAM,QAGlB,SAASC,EAAYF,EAAcG,GACjC,OAAQA,EAAOC,MACb,KAAKzB,EAAQ0B,gBACX,OAAO,eACFL,EADL,CAEEH,WAAW,IAGf,KAAKlB,EAAQ2B,eACX,OAAO,eACFN,EADL,CAEEH,WAAW,EACXU,MAAOJ,EAAOK,UAGlB,KAAK7B,EAAQ8B,gBACX,OAAO,eACFT,EADL,CAEEH,WAAW,EACXF,MAAOQ,EAAOK,UAGlB,KAAK7B,EAAQ+B,iBACX,OAAO,eACFV,EADL,CAEEJ,WAAYO,EAAOK,UAGvB,KAAK7B,EAAQgC,iBACX,OAAO,eACFX,EADL,CAEEJ,WAAYO,EAAOK,QACnBb,MAAOK,EAAML,MAAMiB,KAAI,SAACC,GACtB,OAAIA,EAAKC,KAAOX,EAAOK,QAAQM,GACtBX,EAAOK,QAEPK,OAKf,QACE,OAAOb,GAwBEe,MApBf,YAAwD,IAAhCC,EAA+B,EAA/BA,SAA+B,EAC3BC,qBAAWf,EAAaR,GADG,mBAC9CM,EAD8C,KACvCC,EADuC,KAiBrD,OAdAiB,qBAAU,WAAM,4CACd,4BAAAjC,EAAA,sEAEIgB,EAAS,CAAEG,KAAMzB,EAAQ0B,kBAF7B,SAGsBrB,IAHtB,OAGUmC,EAHV,OAIIlB,EAAS,CAAEG,KAAMzB,EAAQ8B,gBAAiBD,QAASW,EAAI7B,KAAK8B,SAJhE,gDAMInB,EAAS,CAAEG,KAAMzB,EAAQ2B,eAAgBE,QAAQ,EAAD,KANpD,0DADc,uBAAC,WAAD,wBAWda,KACC,IAEI,kBAACvB,EAAYwB,SAAb,CAAsBC,MAAO,CAAEvB,QAAOC,aAAae,I,gKGpG5D,IAAMQ,EAAUC,IAAOC,IAAV,KAMEC,EApCf,WAAuB,IAAD,EACQC,qBAAW9B,GAA/BE,EADY,EACZA,MAAOC,EADK,EACLA,SACTsB,EAAQvB,EAAMJ,WAChB,CACEiC,WAAY7B,EAAMJ,WAAWiC,WAC7BC,UAAW9B,EAAMJ,WAAWkC,UAC5BhB,GAAId,EAAMJ,WAAWkB,IAEvB,KAQJ,OACE,kBAACU,EAAD,KACE,2CACA,kBAAC,IAAD,CACED,MAAOA,EACPQ,SAAU,SAACC,GAAD,OAXhB,SAAsBA,GAChBA,GACF/B,EAAS,CAAEG,KAAMzB,EAAQ+B,iBAAkBF,QAASwB,IAS5BC,CAAaD,IACnCE,eAAgB,SAACF,GAAD,OAAYA,EAAOH,WAAa,IAAMG,EAAOF,WAC7DK,eAAgB,SAACH,GAAD,OAAYA,EAAOlB,IACnCsB,QAASpC,EAAML,U,QCzBhB,SAAe0C,EAAtB,kC,4CAAO,WAA2BC,GAA3B,SAAArD,EAAA,+EACEC,IAAMN,EAAW,YAAa,CACnCW,OAAQ,MACRJ,OAAO,eACFL,EADC,CAEJyD,QAASD,OALR,4C,sBAUA,SAAeE,EAAtB,kC,4CAAO,WAA0BlD,GAA1B,SAAAL,EAAA,+EACEC,IAAMN,EAAW,YAAa,CACnCW,OAAQ,OACRC,QAAS,CACPC,cAAe,UAAYZ,GAE7BS,UANG,4C,qLCGP,IAAMkC,EAAUC,IAAOC,IAAV,KAQEe,EAjBf,YAA4C,IAAnBC,EAAkB,EAAlBA,QACvB,OACE,kBAAC,EAAD,KACE,4BAAKA,EAAQC,MACb,2BAAID,EAAQE,QCMHC,MAVf,YAAwC,IAApBC,EAAmB,EAAnBA,SAClB,OACE,6BACGA,EAASlC,KAAI,SAAC8B,GAAD,OACZ,kBAAC,EAAD,CAAeK,IAAKL,EAAQ5B,GAAI4B,QAASA,S,yMCX1C,IAAMM,EAAavB,IAAOwB,KAAV,KCwERC,MA/Df,YAAkD,IAA5BZ,EAA2B,EAA3BA,OAAQa,EAAmB,EAAnBA,SAAmB,EACfC,mBAAS,CACvCT,KAAM,GACNU,MAAO,GACPT,KAAM,GACNL,QAASD,IALoC,mBACxCgB,EADwC,KAC9BC,EAD8B,OAObH,oBAAS,GAPI,mBAOxCvD,EAPwC,KAO7B2D,EAP6B,KAS/C,SAASC,IACPF,GAAY,SAACD,GAAD,sBACPA,EADO,CAEVX,KAAM,GACNU,MAAO,GACPT,KAAM,QAIV,SAASX,EAAayB,GAA+D,IAAD,EAC1DA,EAAEC,OAAlBhB,EAD0E,EAC1EA,KAAMpB,EADoE,EACpEA,MAEdgC,GAAY,SAACD,GAAD,sBACPA,EADO,eAETX,EAAOpB,OAvBmC,4CA2B/C,WAA4BmC,GAA5B,eAAAzE,EAAA,6DACEyE,EAAEE,iBADJ,SAIIJ,GAAa,GAJjB,SAKsBhB,EAAWc,GALjC,OAKUnC,EALV,OAMIgC,EAAShC,EAAI7B,KAAK8B,QAClBqC,IAPJ,0DAUED,GAAa,GAVf,2DA3B+C,sBAwC/C,OACE,kBAACR,EAAD,CAAYG,SAzCiC,6CA0C3C,2BAAOpB,SAAUE,EAAcV,MAAO+B,EAASX,KAAMvC,KAAK,OAAOuC,KAAK,OAAOkB,UAAQ,EAACC,YAAY,cAClG,2BACE/B,SAAUE,EACVV,MAAO+B,EAASD,MAChBjD,KAAK,QACLuC,KAAK,QACLkB,UAAQ,EACRC,YAAY,eAEd,8BACE/B,SAAUE,EACVV,MAAO+B,EAASV,KAChBkB,YAAY,eACZnB,KAAK,OACLkB,UAAQ,IAEV,4BAAQzD,KAAK,UAAUP,EAAY,aAAe,Y,gKCpBxD,IAAM2B,EAAUC,IAAOC,IAAV,KAMEqC,EA3Cf,YAA+C,IAAlBzB,EAAiB,EAAjBA,OAAiB,EACZc,mBAAoB,IADR,mBACrCN,EADqC,KAC3BkB,EAD2B,OAEVZ,oBAAS,GAFC,mBAErCvD,EAFqC,KAE1B2D,EAF0B,KA6B5C,OArBAtC,qBAAU,WAAM,4CACd,4BAAAjC,EAAA,sEAEIuE,GAAa,GAFjB,SAGsBnB,EAAYC,GAHlC,UAKgC,OAFtBnB,EAHV,QAKY7B,KAAK2E,MAAMC,KALvB,gBAMMF,EAAY7C,EAAI7B,KAAK8B,QAN3B,6BAQY,IAAI+C,MAAMhD,EAAI7B,KAAK2E,MAAMG,SARrC,0DAWIC,MAAM,EAAD,IAXT,QAcEb,GAAa,GAdf,2DADc,uBAAC,WAAD,wBAkBdc,KACC,CAAChC,IAGF,kBAAC,EAAD,KACGzC,EAAY,aAAe,kBAAC,EAAD,CAAUiD,SAAUA,IAChD,kBAAC,EAAD,CAAYK,SA5BhB,SAAoBT,GAClBsB,EAAY,GAAD,mBAAKlB,GAAL,CAAeJ,MA2BUJ,OAAQA,M,yGCjBhD,IAAMd,EAAUC,IAAOC,IAAV,KAIE6C,EArBf,YAAsC,IAAhBC,EAAe,EAAfA,KAAe,EACKpB,oBAAS,GADd,mBAC5BqB,EAD4B,KACdC,EADc,KAOnC,OACE,kBAAC,EAAD,KACE,4BAAKF,EAAKG,OACV,2BAAIH,EAAK5B,OACP6B,GAAgB,uBAAGG,QARzB,WACEF,GAAgB,KAOI,iBACjBD,GAAgB,kBAAC,EAAD,CAAmBnC,OAAQkC,EAAK1D,O,gKCOvD,IAAMU,EAAUC,IAAOC,IAAV,KAMEmD,EAzBf,YAAuC,IAAjBC,EAAgB,EAAhBA,MAAgB,EACI1B,oBAAS,GADb,mBAC7B2B,EAD6B,KACfC,EADe,KAGpC,IAAKF,EAAMG,OACT,OAAO,KAGT,IAAMC,EAAeH,EAAe,CAACD,EAAM,IAAMA,EAEjD,OACE,kBAAC,EAAD,KACGI,EAAatE,KAAI,SAAC4D,GAAD,OAChB,kBAAC,EAAD,CAAYzB,IAAKyB,EAAK1D,GAAI0D,KAAMA,OAEjCM,EAAMG,OAAS,GAAKF,GAAgB,wBAAIH,QAAS,kBAAMI,GAAgB,KAAnC,sBCpBpC,SAAeG,GAAtB,mC,8CAAO,WAAwB9F,GAAxB,SAAAJ,EAAA,+EACEC,IAAMN,EAAW,SAAU,CAChCO,OAAO,eACFL,EADC,CAEJsG,QAAS/F,OAJR,4C,0TCQA,IAAMmC,GAAUC,IAAOC,IAAV,MAaL2D,GArBR,WACL,OACE,kBAAC,GAAD,KACE,kBAAC,KAAD,QCsCSC,OArCf,WAA+B,IAElB1F,EACPgC,qBAAW9B,GADbE,MAASJ,WAFiB,EAIFwD,mBAAiB,IAJf,mBAIrB0B,EAJqB,KAIdS,EAJc,OAKMnC,oBAAS,GALf,mBAKrBvD,EALqB,KAKV2D,EALU,KA8B5B,OAvBAtC,qBAAU,WAAM,4CACd,4BAAAjC,EAAA,kEACMW,QADN,IACMA,OADN,EACMA,EAAYkB,IADlB,iCAGM0C,GAAa,GAHnB,SAIwB2B,GAASvF,EAAWkB,IAJ5C,UAMkC,OAFtBK,EAJZ,QAMc7B,KAAK2E,MAAMC,KANzB,iBAOQqB,EAASpE,EAAI7B,KAAK8B,QAP1B,8BASc,IAAI+C,MAAMhD,EAAI7B,KAAK2E,MAAMG,SATvC,0DAYMC,MAAM,EAAD,IAZX,QAeIb,GAAa,GAfjB,2DADc,uBAAC,WAAD,wBAmBdgC,KAEC,QAAC5F,QAAD,IAACA,OAAD,EAACA,EAAYkB,KAEZjB,EACK,kBAAC,GAAD,MAGF,kBAAC,EAAD,CAAYiF,MAAOA,K,kKC6C5B,IAAMtD,GAAUC,IAAOC,IAAV,MAME+D,GAtFf,WAAsB,IAAD,EAIf7D,qBAAW9B,GAFJF,EAFQ,EAEjBI,MAASJ,WACTK,EAHiB,EAGjBA,SAHiB,EAKemD,mBAAS,CACzCvB,WAAY,GACZC,UAAW,KAPM,mBAKZ4D,EALY,KAKDC,EALC,OASevC,oBAAS,GATxB,mBASZvD,EATY,KASD2D,EATC,KAWnB,SAASoC,IACPD,EAAa,CACX9D,WAAY,GACZC,UAAW,KAIf,SAASG,EAAayB,GAAyC,IAAD,EACpCA,EAAEC,OAAlBhB,EADoD,EACpDA,KAAMpB,EAD8C,EAC9CA,MACdoE,GAAa,SAACD,GAAD,sBACRA,EADQ,eAEV/C,EAAOpB,OAtBO,4CA0BnB,WAA4BmC,GAA5B,eAAAzE,EAAA,yDACEyE,EAAEE,kBAEEhE,EAHN,iCAKM4D,GAAa,GALnB,SAMwBpE,EAAgBQ,EAAWkB,GAAI4E,GANvD,UAQkC,OAFtBvE,EANZ,QAQc7B,KAAK2E,MAAMC,KARzB,iBASQjE,EAAS,CACPG,KAAMzB,EAAQgC,iBACdH,QAASW,EAAI7B,KAAK8B,SAEpBwE,IAbR,8BAec,IAAIzB,MAAMhD,EAAI7B,KAAK2E,MAAMG,SAfvC,0DAkBMC,MAAM,EAAD,IAlBX,QAoBIb,GAAa,GApBjB,2DA1BmB,sBAkDnB,OAAK5D,EAKH,kBAAC,GAAD,KACE,oEACA,kBAACoD,EAAD,CAAYG,SAzDG,6CA0Db,2BACE/C,KAAK,OACL2B,SAAUE,EACVV,MAAOmE,EAAU7D,WACjBc,KAAK,aACLmB,YAAY,kBACZD,UAAQ,IAEV,2BACEzD,KAAK,OACL2B,SAAUE,EACVV,MAAOmE,EAAU5D,UACjBa,KAAK,YACLmB,YAAY,iBACZD,UAAQ,IAEV,4BAAQzD,KAAK,UAAUP,EAAY,aAAe,YAvB/C,MChCIgG,OAlBf,WAKE,OAFIjE,qBAAW9B,GADbE,MAASH,UAIF,kBAAC,GAAD,MAIP,oCACE,kBAAC,EAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QCTciG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtG,GACLuG,QAAQvG,MAAMA,EAAM6D,c","file":"static/js/main.1104bc4c.chunk.js","sourcesContent":["import React, { useReducer, createContext, useEffect } from 'react';\r\n\r\nimport { getUsers } from '../api/users';\r\n\r\nexport interface User {\r\n  id: string;\r\n  first_name: string;\r\n  last_name: string;\r\n}\r\n\r\nexport enum Actions {\r\n  addUsersSuccess,\r\n  addUsersStarted,\r\n  addUsersFailed,\r\n  selectActiveUser,\r\n  updateActiveUser,\r\n}\r\n\r\ninterface UserProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\ninterface State {\r\n  users: User[];\r\n  activeUser: User | null;\r\n  isLoading: boolean;\r\n}\r\n\r\ntype AddUsersStartedAction = {\r\n  type: Actions.addUsersStarted;\r\n};\r\n\r\ntype AddUsersFailedAction = {\r\n  type: Actions.addUsersFailed;\r\n  payload: string;\r\n};\r\n\r\ntype AddUsersSuccessAction = {\r\n  type: Actions.addUsersSuccess;\r\n  payload: User[];\r\n};\r\n\r\ntype SelectActiveUserAction = {\r\n  type: Actions.selectActiveUser;\r\n  payload: User;\r\n};\r\n\r\ntype UpdateActiveUserAction = {\r\n  type: Actions.updateActiveUser;\r\n  payload: User;\r\n};\r\n\r\ntype Action =\r\n  | AddUsersFailedAction\r\n  | AddUsersStartedAction\r\n  | AddUsersSuccessAction\r\n  | SelectActiveUserAction\r\n  | UpdateActiveUserAction;\r\n\r\nconst initState: State = {\r\n  users: [],\r\n  activeUser: null,\r\n  isLoading: false,\r\n};\r\n\r\nexport const UserContext = createContext<{\r\n  state: State;\r\n  dispatch: React.Dispatch<any>;\r\n}>({\r\n  state: initState,\r\n  dispatch: () => null,\r\n});\r\n\r\nfunction userReducer(state: State, action: Action) {\r\n  switch (action.type) {\r\n    case Actions.addUsersStarted:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n      };\r\n\r\n    case Actions.addUsersFailed:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        error: action.payload,\r\n      };\r\n\r\n    case Actions.addUsersSuccess:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        users: action.payload,\r\n      };\r\n\r\n    case Actions.selectActiveUser:\r\n      return {\r\n        ...state,\r\n        activeUser: action.payload,\r\n      };\r\n\r\n    case Actions.updateActiveUser:\r\n      return {\r\n        ...state,\r\n        activeUser: action.payload,\r\n        users: state.users.map((user) => {\r\n          if (user.id === action.payload.id) {\r\n            return action.payload;\r\n          } else {\r\n            return user;\r\n          }\r\n        }),\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction UserProvider({ children }: UserProviderProps) {\r\n  const [state, dispatch] = useReducer(userReducer, initState);\r\n\r\n  useEffect(() => {\r\n    async function fetchUsers() {\r\n      try {\r\n        dispatch({ type: Actions.addUsersStarted });\r\n        const res = await getUsers();\r\n        dispatch({ type: Actions.addUsersSuccess, payload: res.data.result });\r\n      } catch (error) {\r\n        dispatch({ type: Actions.addUsersFailed, payload: error });\r\n      }\r\n    }\r\n\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  return <UserContext.Provider value={{ state, dispatch }}>{children}</UserContext.Provider>;\r\n}\r\n\r\nexport default UserProvider;\r\n","export const BASE_URL = 'https://gorest.co.in/public-api';\r\nexport const accessToken = '9sCYGNbLpzt_pSzDk3InomgvIe26LGsEb2J3';\r\n\r\nexport const commonParams = {\r\n  _format: 'json',\r\n  'access-token': accessToken,\r\n};\r\n","import axios from 'axios';\r\n\r\nimport { BASE_URL, commonParams, accessToken } from './common';\r\nimport { UpdateUserNamesDTO } from '../types/users';\r\n\r\nexport async function getUsers() {\r\n  return axios(BASE_URL + '/users', {\r\n    params: {\r\n      ...commonParams,\r\n    },\r\n  });\r\n}\r\n\r\nexport async function updateUserNames(userId: string, data: UpdateUserNamesDTO) {\r\n  return axios(BASE_URL + '/users/' + userId, {\r\n    method: 'PATCH',\r\n    headers: {\r\n      Authorization: 'Bearer ' + accessToken,\r\n    },\r\n    data,\r\n  });\r\n}\r\n","import React, { useContext } from 'react';\r\nimport Select, { ValueType } from 'react-select';\r\nimport styled from 'styled-components';\r\n\r\nimport { UserContext, User, Actions } from '../../contexts/UserContext';\r\n\r\nfunction UserSelect() {\r\n  const { state, dispatch } = useContext(UserContext);\r\n  const value = state.activeUser\r\n    ? {\r\n        first_name: state.activeUser.first_name,\r\n        last_name: state.activeUser.last_name,\r\n        id: state.activeUser.id,\r\n      }\r\n    : null;\r\n\r\n  function handleChange(option: ValueType<User>) {\r\n    if (option) {\r\n      dispatch({ type: Actions.selectActiveUser, payload: option });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <h1>Select user</h1>\r\n      <Select\r\n        value={value}\r\n        onChange={(option) => handleChange(option)}\r\n        getOptionLabel={(option) => option.first_name + ' ' + option.last_name}\r\n        getOptionValue={(option) => option.id}\r\n        options={state.users}\r\n      />\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 40px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nexport default UserSelect;\r\n","import axios from 'axios';\r\n\r\nimport { BASE_URL, commonParams, accessToken } from './common';\r\nimport { CommentDTO } from '../types/comments';\r\n\r\nexport async function getComments(postId: string) {\r\n  return axios(BASE_URL + '/comments', {\r\n    method: 'GET',\r\n    params: {\r\n      ...commonParams,\r\n      post_id: postId,\r\n    },\r\n  });\r\n}\r\n\r\nexport async function addComment(data: CommentDTO) {\r\n  return axios(BASE_URL + '/comments', {\r\n    method: 'POST',\r\n    headers: {\r\n      Authorization: 'Bearer ' + accessToken,\r\n    },\r\n    data,\r\n  });\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Comment } from '../../types/comments';\r\n\r\ninterface Props {\r\n  comment: Comment;\r\n}\r\n\r\nfunction SingleComment({ comment }: Props) {\r\n  return (\r\n    <Wrapper>\r\n      <h4>{comment.name}</h4>\r\n      <p>{comment.body}</p>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  max-width: 400px;\r\n\r\n  &:not(:last-child) {\r\n    border-bottom: 1px solid #999;\r\n  }\r\n`;\r\n\r\nexport default SingleComment;\r\n","import React from 'react';\r\n\r\nimport { Comment } from '../../types/comments';\r\nimport SingleComment from './SingleComment';\r\n\r\ninterface Props {\r\n  comments: Comment[];\r\n}\r\n\r\nfunction Comments({ comments }: Props) {\r\n  return (\r\n    <div>\r\n      {comments.map((comment) => (\r\n        <SingleComment key={comment.id} comment={comment} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Comments;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n\r\n  input,\r\n  textarea {\r\n    margin-bottom: 10px;\r\n    padding: 20px;\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\n\r\nimport { Comment } from '../../types/comments';\r\nimport { addComment } from '../../api/comments';\r\nimport { StyledForm } from '../shared/StyledForm';\r\n\r\ninterface Props {\r\n  postId: string;\r\n  onSubmit: (comment: Comment) => void;\r\n}\r\n\r\nfunction AddComment({ postId, onSubmit }: Props) {\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    body: '',\r\n    post_id: postId,\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  function resetFormData() {\r\n    setFormData((formData) => ({\r\n      ...formData,\r\n      name: '',\r\n      email: '',\r\n      body: '',\r\n    }));\r\n  }\r\n\r\n  function handleChange(e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n    const { name, value } = e.target;\r\n\r\n    setFormData((formData) => ({\r\n      ...formData,\r\n      [name]: value,\r\n    }));\r\n  }\r\n\r\n  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      setIsLoading(true);\r\n      const res = await addComment(formData);\r\n      onSubmit(res.data.result);\r\n      resetFormData();\r\n    } catch (error) {}\r\n\r\n    setIsLoading(false);\r\n  }\r\n\r\n  return (\r\n    <StyledForm onSubmit={handleSubmit}>\r\n      <input onChange={handleChange} value={formData.name} type=\"name\" name=\"name\" required placeholder=\"Your name\" />\r\n      <input\r\n        onChange={handleChange}\r\n        value={formData.email}\r\n        type=\"email\"\r\n        name=\"email\"\r\n        required\r\n        placeholder=\"Your email\"\r\n      />\r\n      <textarea\r\n        onChange={handleChange}\r\n        value={formData.body}\r\n        placeholder=\"Your comment\"\r\n        name=\"body\"\r\n        required\r\n      ></textarea>\r\n      <button type=\"submit\">{isLoading ? 'Submitting' : 'Submit'}</button>\r\n    </StyledForm>\r\n  );\r\n}\r\n\r\nexport default AddComment;\r\n","import React, { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { getComments } from '../../api/comments';\r\nimport { Comment } from '../../types/comments';\r\nimport Comments from './Comments';\r\nimport AddComment from './AddComment';\r\n\r\ninterface Props {\r\n  postId: string;\r\n}\r\n\r\nfunction CommentsContainer({ postId }: Props) {\r\n  const [comments, setComments] = useState<Comment[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  function addComment(comment: Comment) {\r\n    setComments([...comments, comment]);\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchComments() {\r\n      try {\r\n        setIsLoading(true);\r\n        const res = await getComments(postId);\r\n\r\n        if (res.data._meta.code === 200) {\r\n          setComments(res.data.result);\r\n        } else {\r\n          throw new Error(res.data._meta.message);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n\r\n      setIsLoading(false);\r\n    }\r\n\r\n    fetchComments();\r\n  }, [postId]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      {isLoading ? 'Loading...' : <Comments comments={comments} />}\r\n      <AddComment onSubmit={addComment} postId={postId} />\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 40px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nexport default CommentsContainer;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport CommentsContainer from '../comments/CommentsContainer';\r\nimport { Post } from '../../types/posts';\r\n\r\ninterface Props {\r\n  post: Post;\r\n}\r\n\r\nfunction SinglePost({ post }: Props) {\r\n  const [showComments, setShowComments] = useState(false);\r\n\r\n  function handleCommentSwitch() {\r\n    setShowComments(true);\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <h3>{post.title}</h3>\r\n      <p>{post.body}</p>\r\n      {!showComments && <p onClick={handleCommentSwitch}>Show comments</p>}\r\n      {showComments && <CommentsContainer postId={post.id} />}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  border-bottom: 1px solid #999;\r\n`;\r\n\r\nexport default SinglePost;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { Post } from '../../types/posts';\r\nimport SinglePost from './SinglePost';\r\n\r\ninterface Props {\r\n  posts: Post[];\r\n}\r\n\r\nfunction UsersPosts({ posts }: Props) {\r\n  const [isOneVisible, setIsOneVisible] = useState(true);\r\n\r\n  if (!posts.length) {\r\n    return null;\r\n  }\r\n\r\n  const visiblePosts = isOneVisible ? [posts[0]] : posts;\r\n\r\n  return (\r\n    <Wrapper>\r\n      {visiblePosts.map((post) => (\r\n        <SinglePost key={post.id} post={post} />\r\n      ))}\r\n      {posts.length > 1 && isOneVisible && <h3 onClick={() => setIsOneVisible(false)}>show more posts!</h3>}\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 40px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nexport default UsersPosts;\r\n","import axios from 'axios';\r\n\r\nimport { BASE_URL, commonParams } from './common';\r\n\r\nexport async function getPosts(userId: string) {\r\n  return axios(BASE_URL + '/posts', {\r\n    params: {\r\n      ...commonParams,\r\n      user_id: userId,\r\n    },\r\n  });\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport ClipLoader from 'react-spinners/ClipLoader';\r\n\r\nexport function Spinner() {\r\n  return (\r\n    <Wrapper>\r\n      <ClipLoader />\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  position: fixed;\r\n  z-index: 999;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  background-color: rgba(#fff, 0.6);\r\n`;\r\n\r\nexport default Spinner;\r\n","import React, { useContext, useState, useEffect } from 'react';\r\n\r\nimport { UserContext } from '../../contexts/UserContext';\r\nimport { Post } from '../../types/posts';\r\nimport UsersPosts from './UserPosts';\r\nimport { getPosts } from '../../api/posts';\r\nimport Spinner from '../shared/Spinner';\r\n\r\nfunction UserPostsContainer() {\r\n  const {\r\n    state: { activeUser },\r\n  } = useContext(UserContext);\r\n  const [posts, setPosts] = useState<Post[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function fetchPosts() {\r\n      if (activeUser?.id) {\r\n        try {\r\n          setIsLoading(true);\r\n          const res = await getPosts(activeUser.id);\r\n\r\n          if (res.data._meta.code === 200) {\r\n            setPosts(res.data.result);\r\n          } else {\r\n            throw new Error(res.data._meta.message);\r\n          }\r\n        } catch (error) {\r\n          alert(error);\r\n        }\r\n\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n    fetchPosts();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [activeUser?.id]);\r\n\r\n  if (isLoading) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return <UsersPosts posts={posts} />;\r\n}\r\n\r\nexport default UserPostsContainer;\r\n","import React, { useState, useContext } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport { UserContext, Actions } from '../../contexts/UserContext';\r\nimport { updateUserNames } from '../../api/users';\r\nimport { StyledForm } from '../shared/StyledForm';\r\n\r\nfunction UserInput() {\r\n  const {\r\n    state: { activeUser },\r\n    dispatch,\r\n  } = useContext(UserContext);\r\n  const [formState, setFormState] = useState({\r\n    first_name: '',\r\n    last_name: '',\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  function resetState() {\r\n    setFormState({\r\n      first_name: '',\r\n      last_name: '',\r\n    });\r\n  }\r\n\r\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    const { name, value } = e.target;\r\n    setFormState((formState) => ({\r\n      ...formState,\r\n      [name]: value,\r\n    }));\r\n  }\r\n\r\n  async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n    e.preventDefault();\r\n\r\n    if (activeUser) {\r\n      try {\r\n        setIsLoading(true);\r\n        const res = await updateUserNames(activeUser.id, formState);\r\n\r\n        if (res.data._meta.code === 200) {\r\n          dispatch({\r\n            type: Actions.updateActiveUser,\r\n            payload: res.data.result,\r\n          });\r\n          resetState();\r\n        } else {\r\n          throw new Error(res.data._meta.message);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  if (!activeUser) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <h2>Update user first name and last name</h2>\r\n      <StyledForm onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          onChange={handleChange}\r\n          value={formState.first_name}\r\n          name=\"first_name\"\r\n          placeholder=\"user first name\"\r\n          required\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          onChange={handleChange}\r\n          value={formState.last_name}\r\n          name=\"last_name\"\r\n          placeholder=\"user last name\"\r\n          required\r\n        />\r\n        <button type=\"submit\">{isLoading ? 'Submitting' : 'Submit'}</button>\r\n      </StyledForm>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 40px;\r\n  margin-bottom: 20px;\r\n  box-shadow: 1px 2px 4px rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nexport default UserInput;\r\n","import React, { useContext } from 'react';\n\nimport UserSelect from './components/user/UserSelect';\nimport { UserContext } from './contexts/UserContext';\nimport UserPostsContainer from './components/posts/UserPostsContainer';\nimport UserInput from './components/user/UserInput';\nimport Spinner from './components/shared/Spinner';\n\nfunction App() {\n  const {\n    state: { isLoading },\n  } = useContext(UserContext);\n\n  if (isLoading) {\n    return <Spinner />;\n  }\n\n  return (\n    <>\n      <UserSelect />\n      <UserInput />\n      <UserPostsContainer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport UserProvider from './contexts/UserContext';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <UserProvider>\n    <App />\n  </UserProvider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}